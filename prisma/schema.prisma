// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  displayName   String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  age           Int?
  gender        String?
  role          String?
  createdAt     DateTime     @default(now())
  accounts      Account[]
  sessions      Session[]
  classrooms    Classroom[]  @relation("Classroom") // implicit one-to-many relation
  enrolledIn    Classroom[]  @relation("EnrolledIn") // implicit many-to-many relation
  submissions   Submission[]
  ratings       Rating[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id           String       @id @default(cuid())
  name         String
  teacher      User         @relation("Classroom", fields: [userId], references: [id])
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  language     String       @default("en") // en, vi
  students     User[]       @relation("EnrolledIn") //limit to 30 students
  ratings      Rating[]
  assignments  Assignment[]
  subjects     Subject[]    @relation("SubjectOfClassroom")
  description  String       @default("No description provided")
  status       String       @default("active") // active, inactive, archived 
  modifier     String       @default("public") // public, private
  password     String?
  requirements String       @default("No requirements provided")
}

model Subject {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  classrooms  Classroom[] @relation("SubjectOfClassroom")
}

model Attachment {
  id           String     @id @default(cuid())
  filename     String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  type         String     @default("attachment") // attachment or answer of assignment
}

model Assignment {
  id          String       @id @default(cuid())
  number      Int          @default(autoincrement())
  name        String
  description String
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dueDate     String       @default("2023-09-30T00:00:00Z")
  classroom   Classroom    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  submissions Submission[]
  submitRatio Float        @default(0)
  status      String       @default("open") // open, closed
  Comment     Comment[]
}

model Submission {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  filename     String
  studentId    String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  grade        Float?
  Comment      Comment[]
}

model Comment {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  content      String
  studentId    String
  user         User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submissionId String? // one comment can be on a submission or an assignment
  submission   Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Rating {
  id          String    @id @default(cuid())
  studentId   String
  classroomId String
  description String    @default("No description provided")
  amount      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
}
